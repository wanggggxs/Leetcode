//解法一
if(n==0)  return 0;
if(n==1||n==2)  return 1;
int[] dp = new int[38];
dp[0]=0;
dp[1]=1;
dp[2]=1;
int i=3;
while (i<=n){
    dp[i]=dp[i-1]+dp[i-2]+dp[i-3];
    i++;
}return dp[n];

//解法二，借鉴了leetcode里面他人的方法
public int tribonacci(int n) {
if (n == 0 || n == 1 || n == 2){
    return n == 0 ? 0 : 1;
}
return tribonacci(n-3) + tribonacci(n-2) + tribonacci(n-1);
}
